/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: TOF_PSD_monitor_rad
*
* %Identification
* Written by: Kim Lefmann
* Modified from: PSD_monitor_rad by Henrich Frielinghaus, FZJuelich
* Date:       March 2012
* Origin:     UCPH
* Modified by:
*
* Position-sensitive TOF monitor with radially averaging.
*
* %D
* TOF monitor that performs radial averaging.
* Comment: The intensity is given as two 2D files:
*          1) a radial sum vs. TOF
*          2) a radial average (i.e. intensity per area) vs. TOF
*
* Example: TOF_PSD_monitor_rad(rmax=0.2, nr=100, filename="Output.psd", filename_av="Output_av.psd")
*
* %P
* INPUT PARAMETERS:
*
* rmax: [m]              Outer radius of detector 
* nr: [1]                Number of concentric circles 
* filename: [string]     Name of file in which to store the detector image 
* filename_av: [string]  Name of file in which to store the averaged detector image 
* nt: [1]                Number of time bins 
* tmin: [mu-s]           Beginning of time window 
* tmax: [mu-s]           End of time window 
* *
* OUTPUT PARAMETERS:
*
* PSDr_N: []             Array of neutron counts
* PSDr_p: []             Array of neutron weight counts
* PSDr_p2: []            Array of second moments
* PSDr_av_N: []          Array of neutron counts, averaged
* PSDr_av_p: []          Array of neutron weight counts, averaged
* PSDr_av_p2: []         Array of second moments, averaged
*
* %E
*******************************************************************************/

DEFINE COMPONENT TOF_SANS_monitor
DEFINITION PARAMETERS ()
  SETTING PARAMETERS (int nr=100, int nt=100, int nq=200, string filename="", rmax=0.2,Qmax=1, tmin, tmax, SDD = 1.0, restore_neutron=0
  ,instrumentlength = 1.0,PlotFraction=1,BinningFraction=1,EventMode = 0,nowritefile = 0)
OUTPUT PARAMETERS (TOFPSDr_N, TOFPSDr_p, TOFPSDr_p2, TOFPSDr_av_p, TOFPSDr_av_p2)

DECLARE
%{
double tt_0;
double tt_1;
DArray2d TOFPSDr_N;
DArray2d TOFPSDr_p;
DArray2d TOFPSDr_p2;
DArray2d TOFPSDr_av_p;
DArray2d TOFPSDr_av_p2;
DArray1d Lamda;
double T;
DArray1d Iq;
DArray1d Iq2;
DArray1d Iq_Ncount;
%}

INITIALIZE
%{
int i,j,k;

tt_0=tmin*1e-6;
tt_1=tmax*1e-6;

TOFPSDr_N = create_darr2d(nt,nr);
TOFPSDr_p = create_darr2d(nt,nr);
TOFPSDr_p2 = create_darr2d(nt,nr);
TOFPSDr_av_p = create_darr2d(nt,nr);
TOFPSDr_av_p2 = create_darr2d(nt,nr);
Lamda = create_darr1d(nt);
Iq = create_darr1d(nq);
Iq2 = create_darr1d(nq);
Iq_Ncount = create_darr1d(nq);

for (k=0; k<nt; k++)
{
  T = (tt_1-tt_0) * (2*k+1)*0.5;
  Lamda[k] = (2*PI/V2K) / (instrumentlength / T);
}

  %}
TRACE
  %{
    int i,j;
    double dt,radpos, L, q, AreaOfSlice;
    double p1, p2;
    double lamda;
    double qmax;
    
    PROP_Z0;

    radpos = sqrt(x*x+y*y);
    i = floor((t-tt_0)*nt/(tt_1-tt_0));              /* Bin number */


    // Normalization by detector area of the r_bin the neutron hit.

    j = floor(nr*radpos/rmax);
    p1  = p  / (PI*rmax*rmax/(nr*nr)*(2*j+1.0));
    p2 = (p*p) / (PI*rmax*rmax/(nr*nr)*(2*j+1.0)) / (PI*rmax*rmax/(nr*nr)*(2*j+1.0));

    // Converting into q-space
    
    if (EventMode == 0){
    qmax = 4.0 * PI * sin(atan(rmax/SDD)/2.0)/Lamda[i];
    q = 4.0 * PI * sin(atan(radpos/SDD)/2.0)/Lamda[i];
    }
    else{

    lamda = (2*PI/V2K)/sqrt(vx*vx + vy*vy + vz*vz);

    qmax = 4.0 * PI * sin(atan(rmax/SDD)/2.0)/lamda;
    q = 4.0 * PI * sin(atan(radpos/SDD)/2.0)/lamda;
    }


    j = floor(nq*q/Qmax);
    if (q < Qmax && i>=0 && i < nt)
    {
      #pragma acc atomic 
      Iq_Ncount[j] = Iq_Ncount[j] + 1;
      #pragma acc atomic
      Iq[j] = Iq[j] + p1;
      #pragma acc atomic 
      Iq2[j] = Iq2[j] + p2;
    }


    j = floor(nr*q/qmax);

    if (q < qmax && i>=0 && i < nt)
    {
      #pragma acc atomic 
      TOFPSDr_N[i][j]  = TOFPSDr_N[i][j] + 1;
      #pragma acc atomic 
      TOFPSDr_p[i][j]  = TOFPSDr_p[i][j] + p1;
      #pragma acc atomic 
      TOFPSDr_p2[i][j] = TOFPSDr_p2[i][j] + p2;
      
      SCATTER;
    }

    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}


SAVE
  %{
    int i,j,kk,count, name_count;
    double qmax, MAX;
  char ff[256];
  char tt[256];

  MAX = 0.0;

  count = 0;
  name_count = 0;
  if(!nowritefile){
  for (kk=0; kk<nt; kk++) {
    count++;
    if(count == PlotFraction) {
      count = 0;
      name_count++;
      qmax = 4.0 * PI * sin(atan(rmax/SDD)/2.0)/Lamda[kk];
      sprintf(tt, "SANS Iq TOF slice %i ~ %g mu-s",kk,kk*(tmax-tmin)/nt);
      sprintf(ff, "%s_%i",filename,name_count);
      DETECTOR_OUT_1D(
          tt,
          "q [AA^-1]",
          "Intensity",
          "t", 0.0, qmax, nr,
          &TOFPSDr_N[kk][0],&TOFPSDr_p[kk][0],&TOFPSDr_p2[kk][0],
          ff);
         }
      }
  /*sprintf(ff, "%s_%i",filename);
  DETECTOR_OUT_1D(
  "Total Iq from TOF",
  "q [AA^-1]",
  "Intensity",
  "t", 0.0, Qmax, nq,
  &Iq_Ncount[0],&Iq[0],&Iq2[0],
  ff);*/
   }
  %}

FINALLY %{
  destroy_darr2d(TOFPSDr_N);
  destroy_darr2d(TOFPSDr_p);
  destroy_darr2d(TOFPSDr_p2);
  destroy_darr2d(TOFPSDr_av_p);
  destroy_darr2d(TOFPSDr_av_p2);
  destroy_darr1d(Lamda);
  destroy_darr1d(Iq);
  destroy_darr1d(Iq2);
  destroy_darr1d(Iq_Ncount);
%}

MCDISPLAY
%{
  magnify("xy");
  circle("xy",0,0,0,rmax);
%}

END
